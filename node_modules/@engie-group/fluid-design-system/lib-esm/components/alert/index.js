/**
 * --------------------------------------------------------------------------
 * NJ : Alert.ts
 * --------------------------------------------------------------------------
 */
import 'web-animations-js';
import { Core, EventName } from '../../globals/ts/enum';
import AbstractComponent from '../../globals/ts/abstract-component';
import Data from '../../globals/ts/data';
import EventHandler from '../../globals/ts/event-handler';
import WebComponentFactory from '../../globals/ts/web-component-factory';
export default class Alert extends AbstractComponent {
    constructor(element) {
        super(Alert, element);
        this.setListeners();
    }
    close() {
        EventHandler.trigger(this.element, Alert.EVENT.close);
        this.element.animate(Alert.KEY_FRAMES, {
            duration: 250,
            delay: 100,
            easing: 'ease-out'
        }).onfinish = () => {
            this.destroyElement();
        };
    }
    dispose() {
        Data.removeData(this.element, Alert.DATA_KEY);
        this.element = null;
    }
    destroyElement() {
        if (this.element.parentNode) {
            this.element.parentNode.removeChild(this.element);
        }
        EventHandler.trigger(this.element, Alert.EVENT.closed);
    }
    setListeners() {
        const closeButton = this.element.querySelector(Alert.SELECTOR.dismiss);
        EventHandler.on(closeButton, Alert.EVENT.click, () => {
            this.close();
        });
    }
    static init(options = {}) {
        return super.init(this, options, Alert.SELECTOR.default);
    }
    static getInstance(element) {
        return Data.getData(element, Alert.DATA_KEY);
    }
}
Alert.NAME = `${Core.KEY_PREFIX}-alert`;
Alert.DATA_KEY = `${Core.KEY_PREFIX}.alert`;
Alert.EVENT_KEY = `.${Alert.DATA_KEY}`;
Alert.SELECTOR = {
    default: `.${Alert.NAME}`,
    dismiss: `.${Alert.NAME}__close`
};
Alert.KEY_FRAMES = [
    {
        transform: 'translateY(0)',
        opacity: 1
    },
    {
        transform: 'translateY(-16px)',
        opacity: 0
    }
];
Alert.EVENT = {
    click: `${EventName.click}${Alert.EVENT_KEY}`,
    close: `${EventName.close}${Alert.EVENT_KEY}`,
    closed: `${EventName.closed}${Alert.EVENT_KEY}`
};
export class AlertWC extends WebComponentFactory {
    constructor() {
        super(Alert);
    }
    static init() {
        WebComponentFactory.init(AlertWC);
    }
}
AlertWC.TAG_NAME = Alert.NAME;
//# sourceMappingURL=index.js.map