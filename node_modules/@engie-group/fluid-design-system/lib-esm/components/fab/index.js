/**
 * --------------------------------------------------------------------------
 * NJ : Fab.ts
 * --------------------------------------------------------------------------
 */
import 'web-animations-js';
import { Core, EventName } from '../../globals/ts/enum';
import AbstractComponent from '../../globals/ts/abstract-component';
import Data from '../../globals/ts/data';
import EventHandler from '../../globals/ts/event-handler';
import Manipulator from '../../globals/ts/manipulator';
import WebComponentFactory from '../../globals/ts/web-component-factory';
export default class Fab extends AbstractComponent {
    constructor(element, options) {
        super(Fab, element);
        this.buttons = this.element.querySelectorAll(Fab.SELECTOR.button);
        this.items = this.element.querySelectorAll(Fab.SELECTOR.item);
        this.setOptions(options);
        this.element = element;
        this.setListeners();
        Data.setData(element, Fab.DATA_KEY, this);
    }
    open() {
        let i;
        const menuPos = this.options.menuPosition;
        const durationMax = Fab.DURATION_PER_ITEM * this.items.length;
        const button = this.buttons[0];
        Manipulator.toggleClass(button, Fab.OPEN_CLASS);
        const open = button.classList.contains(Fab.OPEN_CLASS);
        const transPos = menuPos === 'top' || menuPos === 'bottom' ? 'translateY' : 'translateX';
        const transWay = menuPos === 'top' || menuPos === 'left' ? '-' : '';
        for (i = 0; i < this.items.length; i++) {
            const transLength = (i + 1) * Fab.ITEMS_HEIGHT + 1;
            const openAnimation = [
                {
                    transform: `${transPos}(0)`,
                    opacity: 0
                },
                {
                    transform: `${transPos}(${transWay}${transLength}rem)`,
                    opacity: 1
                }
            ];
            const keyFrames = open ? openAnimation : openAnimation.reverse();
            const duration = durationMax - Fab.DURATION_PER_ITEM * i;
            const delay = Fab.STAGGER_DELAY * i;
            this.items[i].animate(keyFrames, {
                duration,
                delay,
                fill: 'forwards'
            });
        }
    }
    setListeners() {
        const eventOpen = Fab.EVENT.click;
        EventHandler.on(this.element, eventOpen, this.options.selector, () => this.open());
    }
    setOptions(options) {
        const menuPosition = this.element.getAttribute('data-placement');
        this.options = {
            menuPosition
        };
        this.options = Manipulator.extend(this.options, options);
        // Avoid wrong configuration
        if (['top', 'right', 'bottom', 'left'].indexOf(this.options.menuPosition) < 0) {
            this.options.menuPosition = 'top';
        }
    }
    getOptions() {
        return this.options;
    }
    dispose() {
        Data.removeData(this.element, Fab.DATA_KEY);
        this.element = null;
    }
    static getInstance(element) {
        return Data.getData(element, Fab.DATA_KEY);
    }
    static init(options = {}) {
        return super.init(this, options, Fab.SELECTOR.default);
    }
}
Fab.NAME = `${Core.KEY_PREFIX}-fab-menu`;
Fab.DATA_KEY = `${Core.KEY_PREFIX}.fab`;
Fab.EVENT_KEY = `.${Fab.DATA_KEY}`;
Fab.SELECTOR = {
    default: `.${Fab.NAME}`,
    button: `.${Core.KEY_PREFIX}-fab`,
    item: `.${Core.KEY_PREFIX}-fab__item`
};
Fab.EVENT = {
    click: `${EventName.click}${Fab.EVENT_KEY}`,
    mouseenter: `${EventName.mouseenter}${Fab.EVENT_KEY}`,
    mouseleave: `${EventName.mouseleave}${Fab.EVENT_KEY}`
};
Fab.DURATION_PER_ITEM = 35;
Fab.ITEMS_HEIGHT = 3.8;
Fab.OPEN_CLASS = 'active';
Fab.STAGGER_DELAY = 70;
export class FabWC extends WebComponentFactory {
    constructor() {
        super(Fab);
    }
    static init() {
        WebComponentFactory.init(FabWC);
    }
}
FabWC.TAG_NAME = Fab.NAME;
//# sourceMappingURL=index.js.map