/**
 * --------------------------------------------------------------------------
 * NJ: Slider.ts
 * --------------------------------------------------------------------------
 */
import AbstractComponent from '../../globals/ts/abstract-component';
import { Core } from '../../globals/ts/enum';
import Data from '../../globals/ts/data';
import EventHandler from '../../globals/ts/event-handler';
import Manipulator from '../../globals/ts/manipulator';
import Tooltip from '../tooltip';
import Util from '../../globals/ts/util';
import WebComponentFactory from '../../globals/ts/web-component-factory';
export default class Slider extends AbstractComponent {
    constructor(element, options = {}) {
        super(Slider, element, Slider.getOptions(element, options));
        // eslint-disable-next-line no-magic-numbers
        this.dataId = Number(String(Math.random()).slice(2)) + Date.now();
        this.input = this.element.querySelector(Slider.SELECTOR.input);
        this.element.setAttribute('data-id', this.dataId.toString());
        this.refreshProgressValue();
        this.setListeners();
        if (this.options.tooltip) {
            this.addTooltip();
            this.setTooltipListeners();
        }
        Data.setData(element, Slider.DATA_KEY, this);
    }
    addTooltip() {
        this.tooltip = Manipulator.createHtmlNode(Tooltip.DEFAULT_OPTIONS.template);
        this.tooltip.classList.add(`${Core.KEY_PREFIX}-tooltip--top`);
        this.tooltip.classList.add('show');
        this.element.insertBefore(this.tooltip, this.element.querySelector(Slider.SELECTOR.label));
        this.refreshTooltipValue();
    }
    setListeners() {
        EventHandler.on(this.element, 'input change keyup', () => {
            this.refreshProgressValue();
        });
    }
    setTooltipListeners() {
        EventHandler.on(this.element, 'input change keyup', () => {
            this.refreshTooltipValue();
        });
        const delay = 100;
        let throttled = false;
        EventHandler.on(document, 'resize', () => {
            if (!throttled) {
                this.refreshTooltipValue();
                throttled = true;
                setTimeout(() => {
                    throttled = false;
                }, delay);
            }
        });
    }
    refreshProgressValue() {
        const max = parseInt(this.input.max, 10) || Slider.PERCENT_CONV;
        const min = parseInt(this.input.min, 10) || 0;
        const value = parseInt(this.input.value, 10);
        const perc = Math.floor((Slider.PERCENT_CONV * (value - min)) / (max - min));
        const input = document.querySelector(`[data-id='${this.dataId}']`);
        input.style.setProperty('--slider-track-position', `${perc}% 100%`);
    }
    refreshTooltipValue() {
        this.tooltip.querySelector(Tooltip.SELECTOR.inner).innerHTML = this.input.value;
        this.replaceTooltip();
    }
    replaceTooltip() {
        const min = this.input.min === '' ? 0 : parseInt(this.input.min, 10);
        // eslint-disable-next-line no-magic-numbers
        const max = this.input.max === '' ? 100 : parseInt(this.input.max, 10);
        const val = parseInt(this.input.value, 10);
        const pos = (val - min) / (max - min);
        this.tooltip.style.left = `${pos * (this.input.offsetWidth - Slider.THUMB_WIDTH) -
            this.tooltip.offsetWidth / 2 +
            Slider.THUMB_WIDTH / 2}px`;
    }
    static getOptions(element, options = {}) {
        options = Object.assign(Object.assign(Object.assign({}, Slider.DEFAULT_OPTIONS), Manipulator.getDataAttributes(element)), (typeof options === 'object' && options ? options : {}));
        Util.typeCheckConfig(Slider.NAME, options, Slider.DEFAULT_TYPE);
        return options;
    }
    dispose() {
        Data.removeData(this.element, Slider.DATA_KEY);
        this.element = null;
    }
    static getInstance(element) {
        return Data.getData(element, Slider.DATA_KEY);
    }
    static init(options = {}) {
        return super.init(this, options, Slider.SELECTOR.default);
    }
}
Slider.NAME = `${Core.KEY_PREFIX}-slider`;
Slider.DATA_KEY = `${Core.KEY_PREFIX}.slider`;
Slider.CLASS_NAME = `${Core.KEY_PREFIX}-slider`;
Slider.SELECTOR = {
    default: `.${Slider.CLASS_NAME}`,
    input: 'input',
    label: 'label'
};
// thumb width in pixel
Slider.THUMB_WIDTH = 16;
Slider.DEFAULT_TYPE = {
    tooltip: 'boolean'
};
Slider.DEFAULT_OPTIONS = {
    tooltip: false
};
Slider.PERCENT_CONV = 100;
Slider.PSEUDO_ELEMS = ['webkit-slider-runnable', 'moz-range', 'ms'];
export class SliderWC extends WebComponentFactory {
    constructor() {
        super(Slider);
    }
    static init() {
        WebComponentFactory.init(SliderWC);
    }
}
SliderWC.TAG_NAME = Slider.NAME;
//# sourceMappingURL=index.js.map