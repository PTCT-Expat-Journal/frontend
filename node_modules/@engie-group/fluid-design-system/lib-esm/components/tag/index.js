/**
 * --------------------------------------------------------------------------
 * NJ : Tag.ts
 * --------------------------------------------------------------------------
 */
import 'web-animations-js';
import AbstractComponent from '../../globals/ts/abstract-component';
import { Core } from '../../globals/ts/enum';
import Data from '../../globals/ts/data';
import EventHandler from '../../globals/ts/event-handler';
import { EventName } from '../../globals/ts/enum/event-name';
import Manipulator from '../../globals/ts/manipulator';
import WebComponentFactory from '../../globals/ts/web-component-factory';
export default class Tag extends AbstractComponent {
    constructor(element, options = {}) {
        super(Tag, element, Manipulator.extend(true, {}, options));
        EventHandler.on(element, EventName.click, this.handleClick.bind(this));
    }
    close() {
        this.element.animate(Tag.KEYFRAMES, {
            duration: 200,
            delay: 70,
            easing: 'ease-out'
        }).onfinish = () => {
            this.destroyElement();
        };
    }
    /**
     * Remove element from DOM
     * */
    destroyElement() {
        if (this.element.parentNode) {
            this.element.parentNode.removeChild(this.element);
        }
    }
    dispose() {
        Data.removeData(this.element, Tag.DATA_KEY);
        this.element = null;
    }
    handleClick(event) {
        if (event.target.closest(`.${Core.KEY_PREFIX}-tag__icon`)) {
            this.close();
        }
    }
    static init(options = {}) {
        return super.init(this, options, Tag.SELECTOR.default);
    }
    static getInstance(element) {
        return Data.getData(element, Tag.DATA_KEY);
    }
    static getRootElement(element) {
        return element.closest(Tag.SELECTOR.default);
    }
}
Tag.NAME = `${Core.KEY_PREFIX}-tag`;
Tag.DATA_KEY = `${Core.KEY_PREFIX}.tag`;
Tag.KEYFRAMES = [
    {
        opacity: 1
    },
    {
        opacity: 0
    }
];
Tag.SELECTOR = {
    default: `.${Tag.NAME}:not(.disabled)`
};
export class TagWC extends WebComponentFactory {
    constructor() {
        super(Tag);
    }
    static init() {
        WebComponentFactory.init(TagWC);
    }
}
TagWC.TAG_NAME = Tag.NAME;
//# sourceMappingURL=index.js.map