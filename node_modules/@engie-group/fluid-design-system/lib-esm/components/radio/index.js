/**
 * --------------------------------------------------------------------------
 * NJ : Radio.ts
 * --------------------------------------------------------------------------
 */
import AbstractFormBaseSelection from '../../globals/ts/abstract-form-base-selection';
import { Core } from '../../globals/ts/enum';
import Data from '../../globals/ts/data';
import Manipulator from '../../globals/ts/manipulator';
import WebComponentFactory from '../../globals/ts/web-component-factory';
export default class Radio extends AbstractFormBaseSelection {
    constructor(element, options = {}, properties = {
        inputType: 'radio',
        outerClass: `${Core.KEY_PREFIX}-radio`
    }) {
        super(Radio, element, Manipulator.extend(true, Radio.DEFAULT_OPTIONS, options), properties);
    }
    dispose() {
        Data.removeData(this.element, Radio.DATA_KEY);
        this.element = null;
    }
    matches() {
        return this.element.getAttribute('type') === 'radio';
    }
    static getInstance(element) {
        return Data.getData(element, Radio.DATA_KEY);
    }
    static init(options = {}) {
        return super.init(this, options, Radio.SELECTOR.default);
    }
}
Radio.NAME = `${Core.KEY_PREFIX}-radio`;
Radio.DATA_KEY = `${Core.KEY_PREFIX}.radio`;
Radio.SELECTOR = {
    default: `.${Radio.NAME} > label > input[type=radio]`,
    formGroup: AbstractFormBaseSelection.SELECTOR.formGroup,
    label: AbstractFormBaseSelection.SELECTOR.label
};
Radio.DEFAULT_OPTIONS = {
    template: `<span class="${Core.KEY_PREFIX}-radio__decorator"></span>`,
    njFormGroup: {
        required: false
    }
};
export class RadioWC extends WebComponentFactory {
    constructor() {
        super(Radio);
    }
    static init() {
        WebComponentFactory.init(RadioWC);
    }
}
RadioWC.TAG_NAME = Radio.NAME;
//# sourceMappingURL=index.js.map