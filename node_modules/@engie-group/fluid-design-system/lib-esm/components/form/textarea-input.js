/**
 * --------------------------------------------------------------------------
 * NJ: textarea.ts
 * --------------------------------------------------------------------------
 */
import AbstractFormControl from '../../globals/ts/abstract-form-control';
import { Core } from '../../globals/ts/enum';
import Data from '../../globals/ts/data';
import Manipulator from '../../globals/ts/manipulator';
import WebComponentFactory from '../../globals/ts/web-component-factory';
export default class TextareaInput extends AbstractFormControl {
    constructor(element, options = {}) {
        super(TextareaInput, element, Manipulator.extend(true, {}, options));
        Data.setData(element, TextareaInput.DATA_KEY, this);
    }
    dispose() {
        Data.removeData(this.element, TextareaInput.DATA_KEY);
        this.element = null;
    }
    static init(options = {}) {
        return super.init(this, options, TextareaInput.SELECTOR.default);
    }
    static getInstance(element) {
        return Data.getData(element, TextareaInput.DATA_KEY);
    }
    static matches(element) {
        return element.tagName === 'TEXTAREA';
    }
}
TextareaInput.NAME = `${Core.KEY_PREFIX}-form-input-textarea`;
TextareaInput.DATA_KEY = `${Core.KEY_PREFIX}.textarea`;
TextareaInput.SELECTOR = {
    default: 'textarea',
    formGroup: AbstractFormControl.SELECTOR.formGroup
};
export class TextareaInputWC extends WebComponentFactory {
    constructor() {
        super(TextareaInput);
    }
    static init() {
        WebComponentFactory.init(TextareaInputWC);
    }
}
TextareaInputWC.TAG_NAME = TextareaInput.NAME;
//# sourceMappingURL=textarea-input.js.map