/**
 * --------------------------------------------------------------------------
 * NJ: text.ts
 * --------------------------------------------------------------------------
 */
import AbstractFormControl from '../../globals/ts/abstract-form-control';
import { Core } from '../../globals/ts/enum';
import Data from '../../globals/ts/data';
import Manipulator from '../../globals/ts/manipulator';
import WebComponentFactory from '../../globals/ts/web-component-factory';
export default class TextInput extends AbstractFormControl {
    constructor(element, options = {}) {
        super(TextInput, element, Manipulator.extend(true, TextInput.DEFAULT_OPTIONS, options));
        Data.setData(element, TextInput.DATA_KEY, this);
    }
    dispose() {
        Data.removeData(this.element, TextInput.DATA_KEY);
        this.element = null;
    }
    static init(options = {}) {
        return super.init(this, options, TextInput.SELECTOR.default);
    }
    static getInstance(element) {
        return Data.getData(element, TextInput.DATA_KEY);
    }
    static matches(element) {
        return element.getAttribute('type') === 'text';
    }
}
TextInput.NAME = `${Core.KEY_PREFIX}-form-input-text`;
TextInput.DATA_KEY = `${Core.KEY_PREFIX}.text`;
TextInput.SELECTOR = {
    default: 'input:not([type=hidden]):not([type=checkbox]):not([type=radio]):not([type=file]):not([type=button]):not([type=submit]):not([type=reset])',
    formGroup: AbstractFormControl.SELECTOR.formGroup
};
TextInput.DEFAULT_OPTIONS = {
    njFormGroup: {
        required: false
    }
};
export class TextInputWC extends WebComponentFactory {
    constructor() {
        super(TextInput);
    }
    static init() {
        WebComponentFactory.init(TextInputWC);
    }
}
TextInputWC.TAG_NAME = TextInput.NAME;
//# sourceMappingURL=text-input.js.map