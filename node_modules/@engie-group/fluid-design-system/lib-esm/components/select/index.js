/**
 * --------------------------------------------------------------------------
 * NJ : Select.ts
 * --------------------------------------------------------------------------
 */
import AbstractFormBaseInput from '../../globals/ts/abstract-form-base-input';
import { Core } from '../../globals/ts/enum';
import Data from '../../globals/ts/data';
import Manipulator from '../../globals/ts/manipulator';
import WebComponentFactory from '../../globals/ts/web-component-factory';
export default class Select extends AbstractFormBaseInput {
    constructor(element, options = {}) {
        super(Select, element, Manipulator.extend(true, Select.DEFAULT_OPTIONS, options));
        // floating labels will cover the options, so trigger them to be above (if used)
        this.addIsFilled();
    }
    dispose() {
        Data.removeData(this.element, Select.DATA_KEY);
        this.element = null;
    }
    static init(options = {}) {
        return super.init(this, options, Select.SELECTOR.default);
    }
    static getInstance(element) {
        return Data.getData(element, Select.DATA_KEY);
    }
    static matches(element) {
        return element.tagName === 'SELECT';
    }
}
Select.NAME = `${Core.KEY_PREFIX}-select`;
Select.DATA_KEY = `${Core.KEY_PREFIX}.select`;
Select.SELECTOR = {
    default: 'select',
    formGroup: AbstractFormBaseInput.SELECTOR.formGroup
};
Select.DEFAULT_OPTIONS = {
    requiredClasses: ['form-control||custom-select']
};
export class SelectWC extends WebComponentFactory {
    constructor() {
        super(Select);
    }
    static init() {
        WebComponentFactory.init(SelectWC);
    }
}
SelectWC.TAG_NAME = Select.NAME;
//# sourceMappingURL=index.js.map