/**
 * --------------------------------------------------------------------------
 * NJ : abstract-form-base.ts
 * --------------------------------------------------------------------------
 */
import AbstractComponent from './abstract-component';
import Testing from './testing';
export default class AbstractFormBase extends AbstractComponent {
    constructor(component, element, options = {}, properties = {}) {
        super(component, element, options);
        // set properties for use in the constructor initialization
        for (const key in properties) {
            if ({}.hasOwnProperty.call(properties, key)) {
                this[key] = properties[key];
            }
            else {
                console.error(`${key} does not exist in properties`);
            }
        }
    }
    addFormGroupFocus() {
        if (!this.element.disabled === true) {
            this.njFormGroup.classList.add(AbstractFormBase.CLASS_NAME.isFocused);
        }
    }
    removeFormGroupFocus() {
        this.njFormGroup.classList.remove(AbstractFormBase.CLASS_NAME.isFocused);
    }
    addIsFilled() {
        this.njFormGroup.classList.add(AbstractFormBase.CLASS_NAME.isFilled);
    }
    removeIsFilled() {
        this.njFormGroup.classList.remove(AbstractFormBase.CLASS_NAME.isFilled);
    }
    findFormGroup(raiseError = true) {
        const formGroup = this.element.closest(AbstractFormBase.SELECTOR.formGroup);
        if (formGroup === null && raiseError) {
            console.error(`Failed to find ${AbstractFormBase.SELECTOR.formGroup} for ${Testing.describe(this.element)}`);
        }
        return formGroup;
    }
}
AbstractFormBase.CLASS_NAME = {
    njFormGroup: 'nj-form-group',
    isFilled: 'is-filled',
    isFocused: 'is-focused'
};
AbstractFormBase.SELECTOR = {
    formGroup: `.${AbstractFormBase.CLASS_NAME.njFormGroup}`
};
//# sourceMappingURL=abstract-form-base.js.map