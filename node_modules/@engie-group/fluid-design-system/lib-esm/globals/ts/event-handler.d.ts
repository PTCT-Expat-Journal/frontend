interface Handler extends Function {
    delegationSelector?: any;
    originalHandler?: any;
    oneOff?: boolean;
    uidEvent?: number;
}
export default class EventHandler {
    private static readonly NAMESPACE_REGEX;
    private static readonly STRIPNAME_REGEX;
    private static readonly KEYEVENT_REGEX;
    private static readonly STRIPUID_REGEX;
    private static readonly EVENTREGISTRY;
    private static uidEvent;
    static getUidEvent(element: any, uid?: any): number;
    static getEvent(element: any): {};
    static fixEvent(event: any, element: any): void;
    static njHandler(element: any, fn: any): Handler;
    static njDelegationHandler(element: any, selector: any, fn: any): Handler;
    static findHandler(events: any, handler: any, delegationSelector?: any): any;
    static normalizeParams(originalTypeEvent: string, handler?: Function | string, delegationFn?: Function): [boolean, Function, string];
    static addHandler(element: any, originalTypeEvents: string, handler?: Function | string, delegationFn?: Function, oneOff?: any): void;
    static removeHandler(element: any, events: any, typeEvent: any, handler: any, delegationSelector: any): void;
    static removeNamespacedHandlers(element: any, events: any, typeEvent: any, namespace: any): void;
    static on(element: Document | Element, events: string, handler?: Function | string, delegationFn?: any): void;
    static one(element: Document | Element, events: string, handler?: Function | string, delegationFn?: any): void;
    static off(element: Document | Element, originalTypeEvent: string, handler?: Function | string, delegationFn?: any): void;
    static trigger(element: any, event: any, args?: any): any;
}
export {};
