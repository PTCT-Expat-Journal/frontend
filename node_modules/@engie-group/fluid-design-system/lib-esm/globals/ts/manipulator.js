/**
 * --------------------------------------------------------------------------
 * Bootstrap (v4.1.3): dom/manipulator.js
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 * --------------------------------------------------------------------------
 */
function normalizeData(val) {
    if (val === 'true') {
        return true;
    }
    else if (val === 'false') {
        return false;
    }
    else if (val === 'null') {
        return null;
    }
    else if (val === Number(val).toString()) {
        return Number(val);
    }
    else if (val === '') {
        return null;
    }
    return val;
}
const Manipulator = {
    getDataAttributes(element) {
        if (typeof element === 'undefined' || element === null) {
            return {};
        }
        let attributes = {};
        if (Object.getOwnPropertyDescriptor(HTMLElement.prototype, 'dataset')) {
            attributes = Object.assign({}, element.dataset);
        }
        else {
            for (let i = 0; i < element.attributes.length; i++) {
                const attribute = element.attributes[i];
                if (attribute.nodeName.indexOf('data-') !== -1) {
                    // remove 'data-' part of the attribute name
                    const attributeName = attribute.nodeName
                        .substring('data-'.length)
                        .replace(/-./g, str => str.charAt(1).toUpperCase());
                    attributes[attributeName] = attribute.nodeValue;
                }
            }
        }
        Object.keys(attributes).forEach(key => {
            attributes[key] = normalizeData(attributes[key]);
        });
        return attributes;
    },
    toggleClass(element, className) {
        if (typeof element === 'undefined' || element === null) {
            return;
        }
        if (element.classList.contains(className)) {
            element.classList.remove(className);
        }
        else {
            element.classList.add(className);
        }
    },
    // Merge the object into the extended object
    mergeExtended(extended, obj, deep) {
        for (const prop in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, prop)) {
                // If property is an object, merge properties
                if (deep && Object.prototype.toString.call(obj[prop]) === '[object Object]') {
                    extended[prop] = Manipulator.extend(extended[prop], obj[prop]);
                }
                else {
                    extended[prop] = obj[prop];
                }
            }
        }
        return extended;
    },
    /* !
     * Merge two or more objects together.
     * (c) 2017 Chris Ferdinandi, MIT License, https://gomakethings.com
     * @see https://gomakethings.com/merging-objects-with-vanilla-javascript/
     * @param   {Boolean}  deep     If true, do a deep (or recursive) merge [optional]
     * @param   {Object}   objects  The objects to merge together
     * @returns {Object}            Merged values of defaults and options
     */
    extend(...args) {
        // Variables
        let extended = {};
        let deep = false;
        let i = 0;
        // Check if a deep merge
        if (Object.prototype.toString.call(args[0]) === '[object Boolean]') {
            deep = args[0];
            i++;
        }
        // Loop through each object and conduct a merge
        for (; i < args.length; i++) {
            extended = Manipulator.mergeExtended(extended, args[i], deep);
        }
        return extended;
    },
    createHtmlNode(domString) {
        const parser = new DOMParser();
        const html = parser.parseFromString(domString, 'text/html');
        return html.body.firstChild;
    }
};
export default Manipulator;
//# sourceMappingURL=manipulator.js.map