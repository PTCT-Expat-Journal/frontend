/**
 * --------------------------------------------------------------------------
 * NJ : abstract-component.ts
 * --------------------------------------------------------------------------
 */

export default abstract class AbstractComponent {
  // Constants
  protected static DATA_KEY: string; // `${coreConfig.KEY_PREFIX}.componentName`
  protected static DATA_API_KEY: string; // coreConfig.KEY_PREFIX
  protected static DEFAULT_OPTIONS: { [key: string]: any };
  protected static EVENT_KEY: string; // `.${DATA_KEY}`
  protected static NAME: string; // 'componentName'
  protected static SELECTOR: { [key: string]: string };

  protected options: any;
  protected element: HTMLElement;

  constructor(Component: any, element?: HTMLElement, options = {}) {
    // Display error if el is valid HTML Element
    if (element && !(element instanceof Element)) {
      console.error(Error(`${element} is not an HTML Element`));
    }

    // If exists, destroy and reinitialize in child
    const ins = Component.getInstance(element);
    if (ins) {
      ins.dispose();
    }

    this.options = options;
    this.element = element;
  }

  protected static init(Component: any, options = {}, selector: string): any[] {
    const instances = [];

    document.querySelectorAll(selector).forEach(element => {
      instances.push(new Component(element, options));
    });

    return instances;
  }

  /**
   * Destroys an element's component
   */
  abstract dispose(): void;
}
