/**
 * --------------------------------------------------------------------------
 * NJ : Navbar.ts
 * --------------------------------------------------------------------------
 */
import AbstractComponent from '../../globals/ts/abstract-component';
import CollapseComponent from '../collapse';
import CollapseSearchBar from './collapse-searchbar';
import { Core } from '../../globals/ts/enum';
import Data from '../../globals/ts/data';
import EventHandler from '../../globals/ts/event-handler';
import WebComponentFactory from '../../globals/ts/web-component-factory';

export default class Navbar extends AbstractComponent {
  static readonly NAME = `${Core.KEY_PREFIX}-navbar`;
  protected static readonly DATA_KEY = `${Core.KEY_PREFIX}.navbar`;

  private static readonly CLASS_NAME = {
    shownCollapse: `${Navbar.NAME}--shown-collapse`
  };

  protected static readonly SELECTOR = {
    default: `.${Navbar.NAME}`
  };

  constructor(element: HTMLElement) {
    super(Navbar, element);

    this.registerEvents();
  }

  dispose(): void {
    Data.removeData(this.element, Navbar.DATA_KEY);
    this.element = null;
  }

  handleCollapseShow(): void {
    this.element.classList.add(Navbar.CLASS_NAME.shownCollapse);
  }

  handleCollapseHide(): void {
    this.element.classList.remove(Navbar.CLASS_NAME.shownCollapse);
  }

  static getInstance(element: HTMLElement): Navbar {
    return Data.getData(element, Navbar.DATA_KEY) as Navbar;
  }

  static init(options = {}): Navbar[] {
    CollapseSearchBar.init(); // Init CollapseSearchBar if its selector exists
    return super.init(this, options, Navbar.SELECTOR.default) as Navbar[];
  }

  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */
  private registerEvents(): void {
    EventHandler.on(this.element, CollapseComponent.EVENT.show, () => {
      this.handleCollapseShow();
    });

    EventHandler.on(this.element, CollapseComponent.EVENT.hidden, () => {
      this.handleCollapseHide();
    });
  }
}

export class NavbarWC extends WebComponentFactory {
  static readonly TAG_NAME = Navbar.NAME;

  constructor() {
    super(Navbar, CollapseComponent);
  }

  static init(): void {
    WebComponentFactory.init(NavbarWC);
  }
}
