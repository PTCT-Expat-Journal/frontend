@mixin button-size($height, $padding-x, $font-size, $font-weight, $line-height) {
  height: $height;
  padding: 0 $padding-x;
  font-weight: $font-weight;
  font-size: $font-size;
  line-height: $line-height;
}

@mixin button-focus-effect($space, $color, $color-hover) {
  &:not(.stretched-link) {
    &::after {
      @include transition(top .15s, left .15s, padding .15s, opacity .15s, box-shadow .15s ease-in-out);
      position: absolute;
      top: 0;
      left: 0;
      z-index: 10;
      box-sizing: content-box;
      width: 100%;
      height: 100%;
      box-shadow: 0 0 0 1px $color;
      opacity: 0;
      content: "";
      pointer-events: none;
    }

    &:focus {
      &:not(:active):not(.disabled) {
        &::after {
          top: -#{$space}px;
          left: -#{$space}px;
          padding: #{$space}px;
          opacity: 1;
        }
      }
    }
  }
}

// Overriding this mixin due to static values of $hover-background and $hover-border
// @mixin button-variant($background, $hover-background: shade($background, 26%), $active-background: shade($background, 38%)) {
@mixin button-variant($color) {
  background: css-var(theme, $color);

  &,
  .#{$prefix}-btn__icon,
  .#{$prefix}-btn--icon i {
    @if ($color == "light") {
      color: var(--text-on-light);
    } @else {
      color: var(--text-on-background)
    }
  }

  @include button-focus-effect(2, css-var(theme, $color), css-var(theme-hover, $color));

  &:hover {
    @if ($color != "light") {
      color: var(--body-text-color-inverted)
    }
    text-decoration: none;
    background: css-var(theme-hover, $color);
    outline: 0;
  }

  // Disabled comes first so active can properly restyle
  &.disabled,
  &:disabled {
    color: var(--btn-disabled-color);
    background-color: var(--btn-disabled-bg-color);
    border-color: transparent;
    opacity: 1;

    @if ($color == "light") {
      color: var(--theme-primary);
      background-color: var(--white-300);
    }

    .#{$prefix}-btn__icon {
      color: var(--btn-disabled-color);
    }

    .#{$prefix}-spinner {
      @include spinner-color($black, .1, $gray-600);
    }

    @if ($color == "light") {
      [data-theme="dark"] &,
      &[data-theme="dark"] {
        background-color: var(--white-700);
      }
    }
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active,
  .show > &.dropdown-toggle {
    @if ($color != "light") {
      color: var(--body-text-color-inverted);
    }
    background-color: css-var(theme-active, $color);
  }
}

@mixin button-outline-variant($color) {
  color: css-var(theme, $color);
  @if ($color == "light") {
    [data-theme="dark"] &,
    &[data-theme="dark"] {
      color: var(--text-on-background);
    }
  }
  background-color: transparent;
  background-image: none;
  border: 1px solid css-var(theme, $color);

  .#{$prefix}-btn__icon {
    color: css-var(theme, $color);
  }

  @include button-focus-effect(2, css-var(theme, $color), css-var(theme-hover, $color));

  &:hover {
    @if ($color == "light") {
      color: var(--text-on-light);
    } @else {
      color: var(--text-on-background);
    }
    text-decoration: none;
    background-color: css-var(theme, $color);
    border-color: css-var(theme, $color);

    @if ($color == "light") {
      [data-theme="dark"] &,
      &[data-theme="dark"] {
        color: var(--text-on-background);
        background-color: var(--black-100);
      }
    }

    .#{$prefix}-btn__icon {
      color: var(--body-text-color-inverted);
    }
  }

  &.disabled,
  &:disabled {
    color: var(--btn-disabled-color);
    background-color: transparent;
    border-color: var(--btn-disabled-color);

    @if ($color == "light") {
      color: var(--white-300);
      border-color: var(--white-300);
    }

    .#{$prefix}-btn__icon {
      color: var(--btn-disabled-color);
    }

    @if ($color == "light") {
      [data-theme="dark"] &,
      &[data-theme="dark"] {
        color: var(--white-100);
        background-color: var(--white-100);
        border-color: transparent;
      }
    }
  }

  &:not(:disabled):not(.disabled):active,
  &:not(:disabled):not(.disabled).active,
  .show > &.dropdown-toggle {
    @if ($color == "light") {
      color: var(--text-on-light);
    } @else {
      color: var(--text-on-background);
    }
    background-color: css-var(theme-active, $color);
    border-color: css-var(theme-active, $color);

    @if ($color == "light") {
      [data-theme="dark"] &,
      &[data-theme="dark"] {
        color: var(--text-on-background);
        background-color: var(--black-300);
      }
    }

    .#{$prefix}-btn__icon {
      color: inherit;
    }
  }
}
