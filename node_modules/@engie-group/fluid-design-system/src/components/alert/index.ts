/**
 * --------------------------------------------------------------------------
 * NJ : Alert.ts
 * --------------------------------------------------------------------------
 */
import 'web-animations-js';
import { Core, EventName } from '../../globals/ts/enum';
import AbstractComponent from '../../globals/ts/abstract-component';
import Data from '../../globals/ts/data';
import EventHandler from '../../globals/ts/event-handler';
import WebComponentFactory from '../../globals/ts/web-component-factory';

export default class Alert extends AbstractComponent {
  static readonly NAME = `${Core.KEY_PREFIX}-alert`;
  protected static readonly DATA_KEY = `${Core.KEY_PREFIX}.alert`;
  protected static readonly EVENT_KEY = `.${Alert.DATA_KEY}`;

  protected static readonly SELECTOR = {
    default: `.${Alert.NAME}`,
    dismiss: `.${Alert.NAME}__close`
  };

  private static readonly KEY_FRAMES = [
    {
      transform: 'translateY(0)',
      opacity: 1
    },
    {
      transform: 'translateY(-16px)',
      opacity: 0
    }
  ];

  private static readonly EVENT = {
    click: `${EventName.click}${Alert.EVENT_KEY}`,
    close: `${EventName.close}${Alert.EVENT_KEY}`,
    closed: `${EventName.closed}${Alert.EVENT_KEY}`
  };

  constructor(element: HTMLElement) {
    super(Alert, element);

    this.setListeners();
  }

  close(): void {
    EventHandler.trigger(this.element, Alert.EVENT.close);

    this.element.animate(Alert.KEY_FRAMES, {
      duration: 250,
      delay: 100,
      easing: 'ease-out'
    }).onfinish = (): void => {
      this.destroyElement();
    };
  }

  dispose(): void {
    Data.removeData(this.element, Alert.DATA_KEY);
    this.element = null;
  }

  private destroyElement(): void {
    if (this.element.parentNode) {
      this.element.parentNode.removeChild(this.element);
    }

    EventHandler.trigger(this.element, Alert.EVENT.closed);
  }

  private setListeners(): void {
    const closeButton = this.element.querySelector(Alert.SELECTOR.dismiss);

    EventHandler.on(closeButton, Alert.EVENT.click, () => {
      this.close();
    });
  }

  static init(options = {}): Alert[] {
    return super.init(this, options, Alert.SELECTOR.default) as Alert[];
  }

  static getInstance(element: HTMLElement): Alert {
    return Data.getData(element, Alert.DATA_KEY) as Alert;
  }
}

export class AlertWC extends WebComponentFactory {
  static readonly TAG_NAME = Alert.NAME;

  constructor() {
    super(Alert);
  }

  static init(): void {
    WebComponentFactory.init(AlertWC);
  }
}
