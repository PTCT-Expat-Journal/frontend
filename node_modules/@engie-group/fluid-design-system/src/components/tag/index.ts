/**
 * --------------------------------------------------------------------------
 * NJ : Tag.ts
 * --------------------------------------------------------------------------
 */
import 'web-animations-js';
import AbstractComponent from '../../globals/ts/abstract-component';
import { Core } from '../../globals/ts/enum';
import Data from '../../globals/ts/data';
import EventHandler from '../../globals/ts/event-handler';
import { EventName } from '../../globals/ts/enum/event-name';
import Manipulator from '../../globals/ts/manipulator';
import WebComponentFactory from '../../globals/ts/web-component-factory';

export default class Tag extends AbstractComponent {
  static readonly NAME = `${Core.KEY_PREFIX}-tag`;
  protected static readonly DATA_KEY = `${Core.KEY_PREFIX}.tag`;

  protected static readonly KEYFRAMES = [
    {
      opacity: 1
    },
    {
      opacity: 0
    }
  ];
  protected static readonly SELECTOR = {
    default: `.${Tag.NAME}:not(.disabled)`
  };

  constructor(element: HTMLElement, options = {}) {
    super(Tag, element, Manipulator.extend(true, {}, options));

    EventHandler.on(element, EventName.click, this.handleClick.bind(this));
  }

  close(): void {
    this.element.animate(Tag.KEYFRAMES, {
      duration: 200,
      delay: 70,
      easing: 'ease-out'
    }).onfinish = (): void => {
      this.destroyElement();
    };
  }

  /**
   * Remove element from DOM
   * */
  destroyElement(): void {
    if (this.element.parentNode) {
      this.element.parentNode.removeChild(this.element);
    }
  }

  dispose(): void {
    Data.removeData(this.element, Tag.DATA_KEY);
    this.element = null;
  }

  handleClick(event): void {
    if (event.target.closest(`.${Core.KEY_PREFIX}-tag__icon`)) {
      this.close();
    }
  }

  static init(options = {}): Tag[] {
    return super.init(this, options, Tag.SELECTOR.default) as Tag[];
  }

  static getInstance(element: HTMLElement): Tag {
    return Data.getData(element, Tag.DATA_KEY) as Tag;
  }

  static getRootElement(element: Element): Element {
    return element.closest(Tag.SELECTOR.default);
  }
}

export class TagWC extends WebComponentFactory {
  static readonly TAG_NAME = Tag.NAME;

  constructor() {
    super(Tag);
  }

  static init(): void {
    WebComponentFactory.init(TagWC);
  }
}
