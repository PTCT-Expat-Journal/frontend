/**
 * --------------------------------------------------------------------------
 * NJ: textarea.ts
 * --------------------------------------------------------------------------
 */
import AbstractFormControl from '../../globals/ts/abstract-form-control';
import { Core } from '../../globals/ts/enum';
import Data from '../../globals/ts/data';
import Manipulator from '../../globals/ts/manipulator';
import WebComponentFactory from '../../globals/ts/web-component-factory';

export default class TextareaInput extends AbstractFormControl {
  static readonly NAME = `${Core.KEY_PREFIX}-form-input-textarea`;
  protected static readonly DATA_KEY = `${Core.KEY_PREFIX}.textarea`;

  protected static readonly SELECTOR = {
    default: 'textarea',
    formGroup: AbstractFormControl.SELECTOR.formGroup
  };

  constructor(element: HTMLTextAreaElement, options = {}) {
    super(TextareaInput, element, Manipulator.extend(true, {}, options));

    Data.setData(element, TextareaInput.DATA_KEY, this);
  }

  dispose(): void {
    Data.removeData(this.element, TextareaInput.DATA_KEY);
    this.element = null;
  }

  static init(options = {}): TextareaInput[] {
    return super.init(this, options, TextareaInput.SELECTOR.default) as TextareaInput[];
  }

  static getInstance(element: HTMLTextAreaElement): TextareaInput {
    return Data.getData(element, TextareaInput.DATA_KEY) as TextareaInput;
  }

  static matches(element: Element): boolean {
    return element.tagName === 'TEXTAREA';
  }
}

export class TextareaInputWC extends WebComponentFactory {
  static readonly TAG_NAME = TextareaInput.NAME;

  constructor() {
    super(TextareaInput);
  }

  static init(): void {
    WebComponentFactory.init(TextareaInputWC);
  }
}
