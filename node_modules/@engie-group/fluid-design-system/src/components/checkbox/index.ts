/**
 * --------------------------------------------------------------------------
 * NJ : Checkbox.ts
 * --------------------------------------------------------------------------
 */
import AbstractFormBaseSelection from '../../globals/ts/abstract-form-base-selection';
import { Core } from '../../globals/ts/enum';
import Data from '../../globals/ts/data';
import Manipulator from '../../globals/ts/manipulator';
import WebComponentFactory from '../../globals/ts/web-component-factory';

export default class Checkbox extends AbstractFormBaseSelection {
  static readonly NAME = `${Core.KEY_PREFIX}-checkbox`;
  protected static readonly DATA_KEY = `${Core.KEY_PREFIX}.checkbox`;

  protected static readonly SELECTOR = {
    default: `.${Checkbox.NAME} > label > input[type=checkbox]`,
    formGroup: AbstractFormBaseSelection.SELECTOR.formGroup,
    label: AbstractFormBaseSelection.SELECTOR.label
  };

  protected static readonly DEFAULT_OPTIONS = {
    template: `<span class="${Checkbox.NAME}__decorator"><span class="${Checkbox.NAME}__check"></span></span>`,
    njFormGroup: {
      required: false
    }
  };

  constructor(element: HTMLInputElement, options = {}, properties = {}) {
    super(Checkbox, element, Manipulator.extend(true, Checkbox.DEFAULT_OPTIONS, options), properties);

    Data.setData(element, Checkbox.DATA_KEY, this);
  }

  dispose(): void {
    Data.removeData(this.element, Checkbox.DATA_KEY);
    this.element = null;
  }

  static init(options = {}): Checkbox[] {
    return super.init(this, options, Checkbox.SELECTOR.default) as Checkbox[];
  }

  static getInstance(element: HTMLInputElement): Checkbox {
    return Data.getData(element, Checkbox.DATA_KEY) as Checkbox;
  }

  static matches(element: Element): boolean {
    return element.getAttribute('type') === 'checkbox';
  }
}

export class CheckboxWC extends WebComponentFactory {
  static readonly TAG_NAME = Checkbox.NAME;

  constructor() {
    super(Checkbox);
  }

  static init(): void {
    WebComponentFactory.init(CheckboxWC);
  }
}
